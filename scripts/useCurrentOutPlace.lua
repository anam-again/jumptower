-- local fs = require("@lune/fs")
-- local roblox = require("@lune/roblox")
-- local Instance = roblox.Instance

-- function convertScriptsRecurse (path, foldername, scripttype)
--     local f = Instance.new("Folder")
--     f.Name = foldername
--     dir = fs.readDir(path)
--     for _, v in ipairs(dir) do
--         filePath = path..'/'..v
--         if(fs.isFile(filePath)) then
--             if(string.find(v, '.lua')) then
--                 print(filePath)
--                 local scr = fs.readFile(filePath)
--                 local thisscript = Instance.new(scripttype)
--                 thisscript.Name = v;
--                 thisscript.Source = scr
--                 thisscript.Parent = f;
--             elseif(string.find(v, '.txt')) then
--                 print(filePath)
--                 local scr = fs.readFile(filePath)
--                 local att = Instance.new('StringValue')
--                 att.Value = scr
--                 att.Parent = f;
--             end
--         elseif (fs.isDir(filePath)) then
--             print(filePath)
--             local fol = convertScriptsRecurse(filePath, v, scripttype)
--             fol.Parent = f;
--         else
--             print('------------->Unknown file found: '..filePath)
--             error();
--         end
--     end
--     return f;
-- end

-- function convertService (game, service)
--     if(service == 'ServerScriptService') then
--         print('Updating ServerScriptService')
--         serv = game:GetService('ServerScriptService')
--         ts = serv:FindFirstChild('TS')
--         ts.Parent = nil;
--         print('Removed previous TS folder')
--         ts = Instance.new('Folder')
--         ts.Name = 'TS'
--         convertScriptsRecurse('../out/server', 'server', "ModuleScript").Parent = ts;
--         convertScriptsRecurse('../out/client', 'client', "ModuleScript").Parent = ts;
--         convertScriptsRecurse('../out/shared', 'shared', "ModuleScript").Parent = ts;
--         ts.Parent = serv
--         print ('Updated ServerScriptService')
--     end
-- end

-- function destroyChildren (instance) 
--     children = instance:GetChildren();
--     for _,v in ipairs(children) do
--         v.Parent = nil;
--     end
-- end

-- local file = fs.readFile("./../assets/floodspore.spacetest.rbxl")
-- local game = roblox.deserializePlace(file)

-- convertService(game, 'ServerScriptService')
 
-- -- Save the DataModel (game) back to the file that we read it from
-- file = roblox.serializePlace(game)
-- fs.writeFile("myPlaceFile.rbxl", file)